runif_design(
lower=box[1,unfixed_param_names],
upper=box[2,unfixed_param_names],
)) -> guesses
freeze(seed=1196696958,
runif_design(
lower=box[1,unfixed_param_names],
upper=box[2,unfixed_param_names],
nseq=200
)) -> guesses
guesses
library(doParallel)
library(doRNG)
library(parallel)
no_cores <- detectCores(logical=FALSE)
cl<- parallel::makeCluster(no_cores, outfile = "")
# m2 is from the betatrendexplorations file
# needed the topline because of the str of
# mif2 requiring a special kind of object
# cl defined in betatrend exploration.Rmd
doParallel::registerDoParallel(cl)
registerDoRNG(123)
print('starting fitting')
#foreach(guess=iter(guesses,"row"), .combine=rbind) %dopar% {
system.time(foreach(i = 1:nrow(guesses), .combine=rbind) %dopar% {
pars = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
parOrder = c("rho","tau","beta1","beta2","beta3","beta4","beta5","beta6","betat","nu",
"gamma","sigma","theta0","alpha","mu","delta","sig_sq","S_0","E_0",
"I_0","A_0","R_0","pop_0")
pars = pars[order(factor(names(pars), levels = parOrder))]
mod_1@params = pars
library(pomp)
library(tidyverse)
#mod_1@params = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
print('guess')
print(i)
mod_1 %>%
# problem is with params argument
mif2(
rw.sd=rw_sd1, Nmif=2,cooling.fraction.50=0.5, Np=2) -> mf
# replicate 10 runs of pfilter so we can get se's
print('replicating guess')
print(i)
replicate(
2,
mf %>% pfilter(Np=2) %>% logLik()) %>%
logmeanexp(se=TRUE) -> ll
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
}-> results)
results
results$loglik
print('starting fitting')
#foreach(guess=iter(guesses,"row"), .combine=rbind) %dopar% {
system.time(foreach(i = 1:nrow(guesses), .combine=rbind) %dopar% {
pars = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
parOrder = c("rho","tau","beta1","beta2","beta3","beta4","beta5","beta6","betat","nu",
"gamma","sigma","theta0","alpha","mu","delta","sig_sq","S_0","E_0",
"I_0","A_0","R_0","pop_0")
pars = pars[order(factor(names(pars), levels = parOrder))]
mod_1@params = pars
library(pomp)
library(tidyverse)
#mod_1@params = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
print('guess')
print(i)
mod_1 %>%
# problem is with params argument
mif2(
rw.sd=rw_sd1, Nmif=10,cooling.fraction.50=0.5, Np=100) -> mf
# replicate 10 runs of pfilter so we can get se's
print('replicating guess')
print(i)
replicate(
10,
mf %>% pfilter(Np=100) %>% logLik()) %>%
logmeanexp(se=TRUE) -> ll
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
}-> results)
print('starting fitting')
#foreach(guess=iter(guesses,"row"), .combine=rbind) %dopar% {
system.time(foreach(i = 1:nrow(guesses), .combine=rbind) %dopar% {
pars = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
parOrder = c("rho","tau","beta1","beta2","beta3","beta4","beta5","beta6","betat","nu",
"gamma","sigma","theta0","alpha","mu","delta","sig_sq","S_0","E_0",
"I_0","A_0","R_0","pop_0")
pars = pars[order(factor(names(pars), levels = parOrder))]
mod_1@params = pars
library(pomp)
library(tidyverse)
#mod_1@params = c(unlist(guesses[i,]),fixed_params, S_0 = 1 - guesses[i,"E_0"] - guesses[i,"I_0"])
print('guess')
print(i)
mod_1 %>%
# problem is with params argument
mif2(
rw.sd=rw_sd1, Nmif=10,cooling.fraction.50=0.5, Np=100) -> mf
# replicate 10 runs of pfilter so we can get se's
print('replicating guess')
print(i)
replicate(
10,
mf %>% pfilter(Np=100) %>% logLik()) %>%
logmeanexp(se=TRUE) -> ll
print(ll)
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
}-> results)
results
results$loglik
getwd()
load("~/OneDrive/Documents/UMich/Research/haitiRes/haitiwash/trendResultsJoint-3.rda")
results
results %>%
group_by(betat) %>%
summarize(loglik=max(loglik)) %>%
ggplot(aes(x = -betat, y=loglik)) +
geom_point() + geom_smooth()
results
results$loglik
results$loglik %>% min
results$loglik %>% max
load("~/OneDrive/Documents/UMich/Research/haitiRes/haitiwash/trendResultsJoint.rda")
results
results %>%
group_by(betat) %>%
summarize(loglik=max(loglik)) %>%
ggplot(aes(x = -betat, y=loglik)) +
geom_point() + geom_smooth()
mcap
mcap(results$loglik, results$betat)
mcap(results$loglik, results$betat)  %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)  %>%unlist() %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat) %>% unlist() %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat) %>% unlist() %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat) %>% tibble() %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat) %>% tibble()
mcap(results$loglik, results$betat) %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)
mcap(results$loglik, results$betat)[1]
mcap(results$loglik, results$betat)[2]
mcap(results$loglik, results$betat)[3]
mcap(results$loglik, results$betat)[4]
mcap(results$loglik, results$betat)[5]
mcap(results$loglik, results$betat)[6]
mcap(results$loglik, results$betat)[7]
mcap(results$loglik, results$betat)[7] %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7]
mcap(results$loglik, results$betat)[7] %>% unlist()
mcap(results$loglik, results$betat)[7]
mcap(results$loglik, results$betat)[7]$parameter
mcap(results$loglik, results$betat)[7] %>% unlist
mcap(results$loglik, results$betat)[7] %>% data.frame
mcap(results$loglik, results$betat)[7] %>% data.frame %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7] %>% data.frame
mcap(results$loglik, results$betat)[7] %>% data.frame %>%
group_by(fit.parameter) %>%
summarize(smoothed=max(fit.smoothed)) %>%
ggplot(aes(x = -fit.parameter, y=fit.smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7] %>% data.frame
mcap(results$loglik, results$betat)[7] %>% data.frame %>% select(fit.smoothed)
mcap(results$loglik, results$betat)[7] %>% data.frame %>%
group_by(fit.parameter) %>%
summarize(smoothed=max(fit.smoothed)) %>%
ggplot(aes(x = -fit.parameter, y=fit.smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[1]
mcap(results$loglik, results$betat)[2]
plot(mcap(results$loglik, results$betat)$parameter, mcap(results$loglik, results$betat)$smoothed)
plot(mcap(results$loglik, results$betat)$parameter, mcap(results$loglik, results$betat)$smoothed)
plot(mcap(results$loglik, results$betat)$smoothed)
plot(mcap(results$loglik, results$betat)$parameter, mcap(results$loglik, results$betat)$smoothed)
mcap(results$loglik, results$betat)$smoothed
mcap(results$loglik, results$betat)$smoothed
mcap(results$loglik, results$betat)
mcap(results$loglik, results$betat) %>% names
plot(mcap(results$loglik, results$betat)$parameter, mcap(results$loglik, results$betat)$smooth_fit)
plot(mcap(results$loglik, results$betat)$parameter, mcap(results$loglik, results$betat)$smooth_fit)
scatter(mcap(results$loglik, results$betat)$smooth_fit)
mcap(results$loglik, results$betat)
mcap(results$loglik, results$betat)[7]
plot(mcap(results$loglik, results$betat)[7]$parameter, mcap(results$loglik, results$betat)[7]$smoothed)
mcap(results$loglik, results$betat)[7]$parameter
mcap(results$loglik, results$betat)[7]$parameter
mcap(results$loglik, results$betat)[7] %>% select(parameter)
mcap(results$loglik, results$betat)[7] %>% unlist %>% select(parameter)
mcap(results$loglik, results$betat)[7]
mcap(results$loglik, results$betat)[7][1]
mcap(results$loglik, results$betat)[7][1] %>% data.frame %>%
group_by(fit.parameter) %>%
summarize(smoothed=max(fit.smoothed)) %>%
ggplot(aes(x = -fit.parameter, y=fit.smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7][1] %>% data.frame %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7][1] %>% data.frame %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7][1]
mcap(results$loglik, results$betat)[7][1] %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7][1] %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)[7][1]
mcap(results$loglik, results$betat)[7][1]$parameter
mcap(results$loglik, results$betat)[7][1]
mcap(results$loglik, results$betat)[7][1]$fit
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth()
mcap(results$loglik, results$betat)
mcap(results$loglik, results$betat) %>% names
mcap(results$loglik, results$betat)$confidence
%>% names
mcap(results$loglik, results$betat) %>% names
mcap(results$loglik, results$betat)$ci
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = mcap(results$loglik, results$betat)$ci[1])  +
geom_vline(xintercept = mcap(results$loglik, results$betat)$ci[2])
mcap(results$loglik, results$betat)$ci
mcap(results$loglik, results$betat)
length(mcap(results$loglik, results$betat))
names(mcap(results$loglik, results$betat))
mcap(results$loglik, results$betat)$mle
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = mcap(results$loglik, results$betat)$ci[1])  +
geom_vline(xintercept = mcap(results$loglik, results$betat)$ci[2])
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = -mcap(results$loglik, results$betat)$ci[1])  +
geom_vline(xintercept = -mcap(results$loglik, results$betat)$ci[2])
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = -mcap(results$loglik, results$betat, confidence=0.9)$ci[1])  +
geom_vline(xintercept = -mcap(results$loglik, results$betat, confidence=0.9)$ci[2])
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = -mcap(results$loglik, results$betat)$ci[1])  +
geom_vline(xintercept = -mcap(results$loglik, results$betat)$ci[2])
mcap(results$loglik, results$betat)[7][1]$fit %>%
group_by(parameter) %>%
summarize(smoothed=max(smoothed)) %>%
ggplot(aes(x = -parameter, y=smoothed)) +
geom_point() + geom_smooth() +
geom_vline(xintercept = -mcap(results$loglik, results$betat, confidence = 0.9)$ci[1])  +
geom_vline(xintercept = -mcap(results$loglik, results$betat, confidence = 0.9)$ci[2])
epi_betas %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_mod_1 <- haiti1mod()
# simulates the model and stores results in df called epi_sims
simulate(epi_mod_1,nsim=Nsim,seed=1643079359,
format="data.frame", include.data = FALSE) -> epi_sims
epi_sims
# remove case data
epi_sims <- epi_sims %>% dplyr::filter(ifelse(.id == "data", FALSE, TRUE))
epi_sims <- epi_sims %>% mutate(N = S+E+I+A+R,
beta = epi_mod_1@params[['beta1']]*seas1 +
epi_mod_1@params[['beta2']]*seas2 +
epi_mod_1@params[['beta3']]*seas3 +
epi_mod_1@params[['beta4']]*seas4 +
epi_mod_1@params[['beta5']]*seas5 +
epi_mod_1@params[['beta6']]*seas6)
load_all('/Users/hetankevin/Library/CloudStorage/OneDrive-Personal/Documents/UMich/Research/haitiRes/haitipkg')
epi_sims <- epi_sims %>% mutate(N = S+E+I+A+R,
beta = epi_mod_1@params[['beta1']]*seas1 +
epi_mod_1@params[['beta2']]*seas2 +
epi_mod_1@params[['beta3']]*seas3 +
epi_mod_1@params[['beta4']]*seas4 +
epi_mod_1@params[['beta5']]*seas5 +
epi_mod_1@params[['beta6']]*seas6)
epi_sims
# simulates the model and stores results in df called epi_sims
simulate(epi_mod_1,nsim=Nsim,seed=1643079359,
format="data.frame", include.data = FALSE) -> epi_sims
epi_sims
epi_mod_1 <- haiti1()
# simulates the model and stores results in df called epi_sims
simulate(epi_mod_1,nsim=Nsim,seed=1643079359,
format="data.frame", include.data = FALSE) -> epi_sims
epi_sims
# simulates the model and stores results in df called epi_sims
simulate(epi_mod_1,nsim=Nsim,seed=1643079359,
format="data.frame", include.data = TRUE) -> epi_sims
epi_sims
epi_sims <- epi_sims %>% mutate(N = S+E+I+A+R,
beta = epi_mod_1@params[['beta1']]*seas1 +
epi_mod_1@params[['beta2']]*seas2 +
epi_mod_1@params[['beta3']]*seas3 +
epi_mod_1@params[['beta4']]*seas4 +
epi_mod_1@params[['beta5']]*seas5 +
epi_mod_1@params[['beta6']]*seas6)
# setup lambda
kappa <- 0.95
epi_sims <- epi_sims %>% mutate(lambda = (I + (1-kappa)*A)^epi_mod_1@params[['nu']] * (beta/N))
epi_sims
# Take median of lambda for each week and store in a vector
epi_med_lambda <- c()
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
week <- c(1:232)
(epi <- epi_lambdas %>% ggplot(aes(x = week, y = epi_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
# Take median of lambda for each week and store in a vector
epi_med_lambda <- c()
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
week <- c(1:232)
epi_lambdas <- data.frame(epi_med_lambda, week)
(epi <- epi_lambdas %>% ggplot(aes(x = week, y = epi_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
epi_mod_1@params
epi_lambdas
epi_med_lambda
epi_sims
epi_sims$lambda
epi_sims$lambda %>% drop_na()
epi_sims$lambda %>% drop_na()
epi_sims$lambda
# Take median of lambda for each week and store in a vector
epi_med_lambda <- c()
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
for(i in c(1:232)) {
epi_med_lambda[i] <- median(filter(epi_sims, week==i)$lambda)
}
week <- c(1:232)
week <- c(1:232)
epi_lambdas <- data.frame(epi_med_lambda, week)
end_mod_1 <- haiti1(period = "endemic")
# simulates the model and stores results in df called end_sims
simulate(end_mod_1,nsim=Nsim,seed=1643079359,
format="data.frame", include.data = TRUE) -> end_sims
# remove case data
end_sims <- end_sims %>% dplyr::filter(ifelse(.id == "data", FALSE, TRUE))
end_sims <- end_sims %>% mutate(N = S+E+I+A+R,
beta = end_mod_1@params[['beta1']]*seas1 +
end_mod_1@params[['beta2']]*seas2 +
end_mod_1@params[['beta3']]*seas3 +
end_mod_1@params[['beta4']]*seas4 +
end_mod_1@params[['beta5']]*seas5 +
end_mod_1@params[['beta6']]*seas6)
# setup lambda
kappa <- 0.95
end_sims <- end_sims %>% mutate(lambda = (I + (1-kappa)*A)^end_mod_1@params[['nu']] * (beta/N))
end_med_lambda <- c()
for(i in c(233:430)) {
end_med_lambda[i-232] <- median(filter(end_sims, week==i)$lambda)
}
for(i in c(233:430)) {
end_med_lambda[i-232] <- median(filter(end_sims, week==i)$lambda)
}
end_week <- c(233:430)
end_week <- c(233:430)
end_lambdas <- data.frame(end_med_lambda, end_week)
epi_med_beta = c()
end_med_beta <- c()
for(i in c(1:232)) {
epi_med_beta[i] <- median(filter(epi_sims, week==i)$beta)
}
for(i in c(1:232)) {
epi_med_beta[i] <- median(filter(epi_sims, week==i)$beta)
}
for(i in c(233:430)) {
end_med_beta[i-232] <- median(filter(end_sims, week==i)$beta)
}
for(i in c(233:430)) {
end_med_beta[i-232] <- median(filter(end_sims, week==i)$beta)
}
week <- c(1:232)
week <- c(1:232)
epi_betas <- data.frame(epi_med_beta, week)
end_week <- c(233:430)
end_week <- c(233:430)
end_betas <- data.frame(end_med_beta, end_week)
(epi <- epi_lambdas %>% ggplot(aes(x = week, y = epi_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
epi_mod_1@params
epi_med_lambda
end_med_lambda
(epi <- end_lambdas %>% ggplot(aes(x = week, y = end_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
epi_lambdas
end_lambdas
(end <- end_lambdas %>% ggplot(aes(x = week, y = end_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
end_lambdas
(end <- end_lambdas %>% ggplot(aes(x = end_week, y = end_med_lambda)) + geom_point() + labs(title = "Epidemic Sims Median FOI by Week"))
epi_betas %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_sims
?pfilter
epi_sims$S
epi_sims$S %>% plot()
end_sims$S %>% plot()
end_sims$I %>% plot()
end_sims
end_sims$S
end_sims$I
epi_betas %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas[1:52] %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas[:,1:52] %>% ggplot() +
epi_betas[,1:52] %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas[1:52,] %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
end_sims$I %>% plot()
end_sims$S %>% plot()
end_sims$S %>% plot()
end_sims
end_sims %>% group_by(week) %>% summarize(S = mean(S))
end_sims %>% group_by(week) %>% summarize(S = mean(S)) %>% select(S) %>% plot
end_sims %>% group_by(week) %>% summarize(S = mean(S))
end_sims %>% group_by(week) %>% summarize(S = mean(S))%>% plot
epi_sims %>% group_by(week) %>% summarize(S = mean(S))%>% plot
epi_sims %>% group_by(week) %>% summarize(S = mean(S))%>% plot
epi_sims %>% group_by(week) %>% summarize(S = mean(S))
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE))
epi_betas[1:52,] %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas[1:52,] %>% mutate(date = lubridate::ymd("2010-10-16") + lubridate::weeks(week)) %>% ggplot() +
geom_line(aes(x = week, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas[1:52,] %>% mutate(date = lubridate::ymd("2010-10-16") + lubridate::weeks(week)) %>% ggplot() +
geom_line(aes(x = date, y =  exp(log(epi_med_beta)-1e-5*date)))
epi_betas[1:52,] %>% mutate(date = lubridate::ymd("2010-10-16") + lubridate::weeks(week)) %>% ggplot() +
geom_line(aes(x = date, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_betas %>% mutate(date = lubridate::ymd("2010-10-16") + lubridate::weeks(week)) %>%
filter(date < "2012-01-01", date >= "2011-01-01") %>% ggplot() +
geom_line(aes(x = date, y =  exp(log(epi_med_beta)-1e-5*week)))
epi_sims %>% group_by(week) %>% summarize(S = mean(S)) %>% plot
end_sims$I
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE)) %>% p
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE)) %>% plot
epi_sims %>% group_by(week) %>% summarize(R = mean(R, na.rm=TRUE)) %>% plot
epi_sims
mod_1
mod_1@params
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE)) %>% plot
epi_sims %>% group_by(week) %>% summarize(R = mean(R, na.rm=TRUE)) %>% plot
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE), R = mean(R, na.rm=TRUE)) %>% plot
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE)) %>% plot
results
epi_sims %>% group_by(week) %>% summarize(S = mean(S, na.rm=TRUE)) %>% plot
